<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="installationThread.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/v7/AMTEwwDR0dAJwsLCNL29vWq7u7uOu7y7lMDA
        wILJyslW2NjXHv///wHx8fEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMvLyQDY2dYCv7++P7a3ta2xsbDtrq6t/q2t
        rP+trav/sLGv/7a2tfq9vbzYqamon2hnZJFcWleQXVtYkF5cWZFfXVuSX15akl5dWpFdW1iSaWdlc62s
        qwiysbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADExcMAy8vKBru8uWuztLHosLGu/6+w
        rf+wsK7+r7Ct/q+wrf6ztLH+tbaz/ra3tP+5ubf/oaCd/4qGgP+JhX3/ioR+/4yHgP+Mh3//jYaA/4yF
        fv+JhH62rauqCrSysAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxMXDAJOTkwDJychnwsPA87S2
        sf+ytK/+tLOx/rSzsf6ztK/+s7Sw/re4tf65urb+vr+9/s3OzP7e3t3+ycjD/rKqov+1raTxzsa9gNPK
        wGfTyL9q0si+Y9fOxCWxpZcA8+3qAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADLzMkAycrINMvM
        yuPMzcn/xcXB/rm5tP63t7P+uLez/ri3s/65uLT+vb24/sHCv/7P0M7+3t7d/tbX1f7FxsL+r6um/6Sb
        lOi7trEqurSwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALu4
        uQPNzsqYzs/L/8/Py/7P0Mv+yMfD/r28t/67u7b+u7u2/r2+uf7FxsL+0dHP/t7f3v7X2Nb+ycjE/sHB
        vf67urX/mZSO7I2Mi011d30odHZ8KXR2fClzdXspc3R6KXJ0eilwdHopb3R5KXB0eShxdXopjI+TGf//
        /wHk4+MAzczJKNHRzN7S0s3/0tLM/tLSzP7S0s3+y8vF/sC6qv7Cq4f+w6qB/s2/qv7e3tv+2dnX/svL
        xv7Dxb7+wsO9/sPDvf6gkXX8kW0w65VvMeiWbTDolWwv6JNrLueTaS3nk2gs55FnLOeRZSznkGUq549j
        KumCakzClpqdGpqYlgDS0s9W1tXR9tbV0P7V1c7+1dXO/tXVz/7Syr3+zaRq/s+TQP7MkDj+yZdL/tC+
        of7Ozcn+x8fA/sXGvv7Fxb7+xcbB/r+rhf69fxX/w4ER/8R/D//DfQ//wnsN/8F5DP/Bdwz/wHUL/75z
        Cv++cQn/vm4I/5FkLOp5foErf356ANXW0XLZ2dP92dnT/tnZ0v7Z2NP+2NjU/tK8m/7Vm0r+048x/tOJ
        Jf7NjjP+yKFk/s7Mwv7Q0Mn+0NDJ/tHRyv7S087+yr6h/ruEHf7EhBL+xIMS/sSBEf7DfxD+wn0P/sJ6
        Dv7BeQ3+wHYM/r90C/6/cgr/kmct6Xh7fyp+e3gA2NnUc9vc1P3b3NT+3NzV/t3b2P7h2t7+2bqd/tqf
        T/7XjSr+04EV/tGRNv7LoF/+29jM/t/f2v7f39j+39/Z/uDg2/7Tx6z+vYch/saHFP7GhhT+xYQT/sSC
        Ev7DgBH+w34Q/sN8D/7Beg7+wHgN/r92C/+UaS3peHt+Kn57dwDa29Zb3t7Y+OHc3f7m2eP+69bp/u7X
        7/7kzMX+26hm/tyeSv7YmEH+0ZdE/tC3iv7h4dr+4uLc/uLi2/7i4tv+4uPe/tHDof6/iRz+x4sW/seJ
        Ff7GhxX+xoUU/sWDEv7FgRL+xH8Q/sN+EP7CfA/+wnoN/5RrL+h2eX8qfHp4AN7a3C/o2ebk7dbt/+3X
        6/7q3ef+6+bo/uvq5/7gzrX+2bF8/tWqb/7Uu5D+3OPI/uLp2v7k5N3+5OTd/uTk3f7k5d/+y7SA/sKM
        F/7Ijxj+yY0X/seLFv7HiRX+xocU/saFFP7FghP+xIER/sN/EP7DfQ//lG0x6Hd5fyp9engA38viCOja
        5qnm3+L/5uTg/unp5P7t7ur+7e7q/urq5f7j4df+4d7S/uPl3P7j69v+4e7W/uPp2/7l5d/+5eXf/uDe
        0v7Dn0v+x5IY/smTGf7JkBj+yY4X/siMF/7Hixb+xogV/saGFP7FhBP+xIIS/sSBEf+WcDHod3l+KX17
        dwDi4twA3uDaRuXm4PDr6ub/7u7r/u7u6f7r6+T+5+fh/ubm4P7m5uD+5ubg/uXn4P7l69v+4u/W/uTq
        3P7n6OL+08Oa/sOVI/7LmBz+y5Yb/sqUGv7Jkhn+yZAY/siOF/7IjBf+x4oW/saIFf7FhhT+xYQS/5dx
        Muh3eX8qfnp4AIuKhQB+fXgUxcK20+/u6f/w7+v+7Ozm/unp4v7n5+H+5+fg/ufn4f7o6OH+6Ojh/ufp
        3/7l7Nz+4/Da/travP7EoUH+y5sd/s2cHv7Mmh3+zJgc/suWG/7KlBn+yZEZ/smPGP7Ijhf+x4wW/seJ
        Fv7HhxT/mHMz6Hd5fyp+e3gAWVRQAERBSROeklDR29Oj/+zr5f7r6+X+6uri/unq4v7p6uH+6eri/unp
        4v7p6eL+6erj/ujr5P7c277+xqxQ/sqgH/7PoiH+z6Af/s6eHv7NnB7+zJkc/suXG/7LlRr+ypQa/smR
        Gf7Ijxj+yI0X/siLFv+YdTXoeHmAKn98eQBfWlUASkhbE6eXPdHPujn/08eB/uHfyP7p6uH+6+zk/uvs
        5P7r7OT+6+zm/uvr5v7l5Nj+1cye/serRf7MpCP+0Kcj/tClIv7QpCH+z6Ig/s6gH/7NnR7+zZsd/s2Z
        HP7Mlxv+ypUa/smTGf7JkRj+yY8X/5p4Nuh5eoEqgHx7AGFcVwBKSFwTrJ1B0dvFMP/TvS/+zrtJ/tLF
        ev7Z0aL+3di0/t7Zt/7b06v+08aJ/su0Vv7Kqiz+0Kwk/tKsJv7SqyX+0qkk/tGnI/7QpSH+0KMg/s6h
        H/7Onx/+zZ0e/s2bHf7MmBz+ypcb/sqVGv7Lkxj/m3o36Xp7giqBfnsAYVxXAEtIWxOtn0LR3soz/93H
        Mv7awy/+1b0t/tG5Mf7OtzX+zrU2/s6zMP7Psin+07Mo/tW0Kf7Wsyj+1bEo/tSuJv7TrCX+0qsl/tGo
        I/7QpiL+0KQh/tCjIf7PoCD+zp4e/sycHf7Mmhz+zJgc/suWGv+cfTjpe3uBKoF+ewBjXVgATUhdE6+i
        Q9HgzjX/38s0/t3JM/7dxzL+3MUx/tvCL/7ZwC/+2b4u/tm8Lf7Yuiz+17kr/ti2Kv7XtCn+1rIp/tWv
        J/7Urib+06wl/tKqJP7RqCP+0aYj/tCkIf7PoiD+z6Ag/s6dHv7NnB3+zZoc/51/Oel8e4Iqgn98AGNe
        WQBMSV4Tr6RF0eHRN//gzzb+3800/t7KM/7eyDL+3ccx/tzEMP7bwjD+2sAv/tq+Lv7ZvC3+2Lks/te4
        K/7Xtir+1rQp/tWyKP7UsCf+064m/tOsJf7SqST+0aci/tClIv7QoyH+0KEg/s+fH/7Nnh3/noE76X18
        gyqEgHwAY15bAExIXxOwp0bR4tQ5/+HSOP7g0Db+3841/t/MNP7eyjP+3cgy/tzGMf7cxDD+28Ew/trA
        L/7Zvi7+2Lws/ti5LP7Xtyv+1rYq/tazKf7VsSf+1K8m/tOtJf7SqyX+0qkj/tGnIv7QpCL+0KMh/tCh
        H/+fgzzpfXyDKoSAfQBkX1oATUleE7GqR9Hj2Dv/4tY5/uHUOP7h0jf+4NA2/uDONf7ezDP+3cky/t3I
        Mv7cxTH+28Mw/trBL/7avy7+2b0t/ti7LP7YuSz+17cr/te1Kv7Wsyj+1LEn/tSuJv7UrSb+0qol/tKo
        I/7SpiP+0aUh/6CGPel+foQqhYJ/AGVgWgBOSl0TsqxI0eTcPP/k2Tv+49c6/uLWOP7h0zj+4dE3/uDP
        Nv7fzjT+3swz/t3JMv7dxzL+3MUx/tvCMP7awC/+2r8u/tq9Lf7Zuiz+2Lkr/te2Kv7WtCn+1bIo/taw
        J/7Urib+06sl/tOqJP7SqCL/oYg/6YCAhiuHhIAAZmFbAE5JXxKzrkrR5uA9/+XePP/l3Dv/5No6/+LY
        Of/i1Tj/4tM3/+HRNv/gzzX/3840/9/LM//fyTL/3ccx/9zEMP/bwi//28Au/9u/Lf/avS3/2bor/9i5
        Kv/Xtin/17Qo/9ayJ//VsCb/1K4l/9OsJP+iikDrg4OJK4qHhABrZF8AT0hiCZeSWqmyrVXysaxT77Gr
        Uu+xqVLvsKhR76+mUO+vplDvr6RP766jT++toU7vraBM76ufTO6rnkvuq5xL7qqbSu6qmknuqphJ7qmY
        SO+olkfuqJRH7qeURu+nkkbvppFF76WPRO+kjkPvoo1D85GCWsiUkZYamZSQAJaUjQCNho0AjoiLGZGL
        jTWOiYszjYiKM46HjDOOh4szjYaLM42HizOMh4ozjYaKM4yGijOKhYoyiYWJMouFhzKKhIgyioSIMoqD
        iDKLhIgyi4aHMomEiDKKhIgyiYWHMomEiDOJhIgziISHMomEiDONiYs3n5iZIv///wHb0s4AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////4A///4AAA/8AAAP/AAAH/gAAf/wAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAA
        AAGAAAABgAAAAcAAAAH///////////////8=
</value>
  </data>
</root>